/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projetoescolar;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.ResultSetImpl;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lucas
 */
public class addestumat extends javax.swing.JFrame {

    /**
     * Creates new form addestumat
     */
    public addestumat() {
        initComponents();
        estudisciplina1.setEditable(false); 
        estudisciplina2.setEditable(false); 
        estudisciplina3.setEditable(false); 
        estudisciplina4.setEditable(false); 
        estudisciplina5.setEditable(false); 
        txtCursoSelecionado.setEditable(false); 
        dispreg.setEditable(false); 
       
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        displist = new javax.swing.JComboBox<>();
        dispreg = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        estura = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        estudisciplina2 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        estudisciplina1 = new javax.swing.JTextField();
        estudisciplina4 = new javax.swing.JTextField();
        estudisciplina3 = new javax.swing.JTextField();
        estudisciplina5 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        cmbCursos = new javax.swing.JComboBox<>();
        txtCursoSelecionado = new javax.swing.JTextField();
        jButton12 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(652, 520));
        getContentPane().setLayout(null);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("RA:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(40, 110, 100, 20);

        jButton5.setBackground(new java.awt.Color(204, 204, 204));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(102, 0, 0));
        jButton5.setText("Deletar");
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(530, 137, 90, 27);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Adicionar Matéria");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(180, 0, 310, 48);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/backbutton small3.png"))); // NOI18N
        jLabel2.setText("Voltar");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel2);
        jLabel2.setBounds(510, 10, 100, 30);

        displist.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Analise de Dados em Python", "Analise critica", "Calculo I", "Cinematografia", "Corpo e Voz", "Desenvolvimento web e Mobile", "Historia da Arte", "Modelagem de Software", "Principios de Programação", "Vida e Carreira" }));
        displist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displistActionPerformed(evt);
            }
        });
        getContentPane().add(displist);
        displist.setBounds(100, 420, 427, 22);

        dispreg.setBackground(new java.awt.Color(255, 255, 255));
        dispreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispregActionPerformed(evt);
            }
        });
        getContentPane().add(dispreg);
        dispreg.setBounds(100, 450, 427, 22);

        jButton4.setBackground(new java.awt.Color(204, 204, 204));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 102, 0));
        jButton4.setText("Registrar");
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(530, 447, 100, 27);

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Disciplinas:");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(0, 420, 95, 20);

        estura.setBackground(new java.awt.Color(255, 255, 255));
        estura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                esturaActionPerformed(evt);
            }
        });
        getContentPane().add(estura);
        estura.setBounds(100, 110, 427, 22);

        jButton7.setBackground(new java.awt.Color(204, 204, 204));
        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton7.setForeground(new java.awt.Color(0, 102, 0));
        jButton7.setText("Abrir Tabela de RA");
        jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7);
        jButton7.setBounds(150, 70, 339, 28);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Atual:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(20, 160, 143, 20);

        estudisciplina2.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(estudisciplina2);
        estudisciplina2.setBounds(100, 170, 427, 22);

        jButton6.setBackground(new java.awt.Color(204, 204, 204));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(0, 102, 0));
        jButton6.setText("Procurar");
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(530, 110, 90, 22);

        estudisciplina1.setBackground(new java.awt.Color(255, 255, 255));
        estudisciplina1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estudisciplina1ActionPerformed(evt);
            }
        });
        getContentPane().add(estudisciplina1);
        estudisciplina1.setBounds(100, 140, 427, 22);

        estudisciplina4.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(estudisciplina4);
        estudisciplina4.setBounds(100, 230, 427, 22);

        estudisciplina3.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(estudisciplina3);
        estudisciplina3.setBounds(100, 200, 427, 22);

        estudisciplina5.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(estudisciplina5);
        estudisciplina5.setBounds(100, 260, 427, 22);

        jButton8.setBackground(new java.awt.Color(204, 204, 204));
        jButton8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton8.setForeground(new java.awt.Color(102, 0, 0));
        jButton8.setText("Deletar");
        jButton8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8);
        jButton8.setBounds(530, 167, 90, 27);

        jButton9.setBackground(new java.awt.Color(204, 204, 204));
        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton9.setForeground(new java.awt.Color(102, 0, 0));
        jButton9.setText("Deletar");
        jButton9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton9);
        jButton9.setBounds(530, 197, 90, 27);

        jButton10.setBackground(new java.awt.Color(204, 204, 204));
        jButton10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton10.setForeground(new java.awt.Color(102, 0, 0));
        jButton10.setText("Deletar");
        jButton10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton10);
        jButton10.setBounds(530, 227, 90, 27);

        jButton11.setBackground(new java.awt.Color(204, 204, 204));
        jButton11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton11.setForeground(new java.awt.Color(102, 0, 0));
        jButton11.setText("Deletar");
        jButton11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton11);
        jButton11.setBounds(530, 257, 90, 27);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Curso:");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(40, 330, 53, 20);

        cmbCursos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sem Curso", "Análise e Desenvolvimento de Sistemas", "Ciência da Computação", "Teatro" }));
        cmbCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCursosActionPerformed(evt);
            }
        });
        getContentPane().add(cmbCursos);
        cmbCursos.setBounds(100, 330, 425, 22);

        txtCursoSelecionado.setBackground(new java.awt.Color(255, 255, 255));
        txtCursoSelecionado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCursoSelecionadoActionPerformed(evt);
            }
        });
        getContentPane().add(txtCursoSelecionado);
        txtCursoSelecionado.setBounds(100, 360, 425, 22);

        jButton12.setBackground(new java.awt.Color(204, 204, 204));
        jButton12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton12.setForeground(new java.awt.Color(0, 102, 0));
        jButton12.setText("Registrar");
        jButton12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton12);
        jButton12.setBounds(530, 357, 100, 27);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Disciplina");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 140, 82, 20);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/ilive logo small adm.png"))); // NOI18N
        getContentPane().add(jLabel6);
        jLabel6.setBounds(-20, -10, 156, 120);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/colorful_background_7.jpg"))); // NOI18N
        getContentPane().add(jLabel7);
        jLabel7.setBounds(-1190, -330, 1920, 860);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
 Connection conn = null;
PreparedStatement verificaStmt = null;
PreparedStatement atualizaStmt = null;
PreparedStatement deletaNotaStmt = null;
ResultSet rs = null;

try {
    conn = (Connection) Conexao.obterConexao();

    String estudanteId = estura.getText().trim();
    if (estudanteId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, insira o ID do estudante.");
        return;
    }

    String verificaSql = "SELECT COUNT(*) FROM estucad WHERE id = ?";
    verificaStmt = (PreparedStatement) conn.prepareStatement(verificaSql);
    verificaStmt.setString(1, estudanteId);

    rs = verificaStmt.executeQuery();

    if (rs.next()) {
        int count = rs.getInt(1);
        if (count > 0) {
           
            String buscaDisciplinaSql = "SELECT disciplina1 FROM estucad WHERE id = ?";
            PreparedStatement buscaDisciplinasStmt = (PreparedStatement) conn.prepareStatement(buscaDisciplinaSql);
            buscaDisciplinasStmt.setString(1, estudanteId);
            ResultSet disciplinaRs = buscaDisciplinasStmt.executeQuery();

            String disciplinaAtual = null;
            if (disciplinaRs.next()) {
                disciplinaAtual = disciplinaRs.getString("disciplina1");
            }

           
            String atualizaSql = "UPDATE estucad SET disciplina1 = 'Sem Matéria' WHERE id = ?";
            atualizaStmt = (PreparedStatement) conn.prepareStatement(atualizaSql);
            atualizaStmt.setString(1, estudanteId);
            int rowsUpdated = atualizaStmt.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Disciplina deletada com sucesso.");

                
                String deletaNotaSql = "DELETE FROM notas WHERE id = ? AND disciplina = ?";
                deletaNotaStmt = (PreparedStatement) conn.prepareStatement(deletaNotaSql);
                deletaNotaStmt.setString(1, estudanteId);
                deletaNotaStmt.setString(2, disciplinaAtual);
                deletaNotaStmt.executeUpdate();

                JOptionPane.showMessageDialog(this, "Entrada na tabela notas deletada com sucesso.");
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao atualizar a disciplina.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "O estudante não está cadastrado.");
        }
    }
} catch (Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Erro ao realizar operação: " + e.getMessage());
} finally {
    try {
        if (rs != null) rs.close();
        if (verificaStmt != null) verificaStmt.close();
        if (atualizaStmt != null) atualizaStmt.close();
        if (deletaNotaStmt != null) deletaNotaStmt.close();
        if (conn != null) conn.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
    }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        moduloestudante obj = new moduloestudante();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void displistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displistActionPerformed
        String disciplinaSelecionada = displist.getSelectedItem().toString();
        dispreg.setText(disciplinaSelecionada);
    }//GEN-LAST:event_displistActionPerformed

    private void dispregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispregActionPerformed
        
    }//GEN-LAST:event_dispregActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    Connection conn = null;
PreparedStatement verificaStmt = null;
PreparedStatement buscaStmt = null;
PreparedStatement atualizaStmt = null;
PreparedStatement insereNotasStmt = null;
PreparedStatement deletaNotasStmt = null;
ResultSet rs = null;

try {
    conn = (Connection) Conexao.obterConexao();

    String estudanteId = estura.getText().trim();
    if (estudanteId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, insira o RA do estudante.");
        return;
    }

    String verificaSql = "SELECT COUNT(*) FROM estucad WHERE id = ?";
    verificaStmt = (PreparedStatement) conn.prepareStatement(verificaSql);
    verificaStmt.setString(1, estudanteId);

    rs = verificaStmt.executeQuery();

    if (rs.next()) {
        int count = rs.getInt(1);
        if (count > 0) {
            String buscaSql = "SELECT disciplina1, disciplina2, disciplina3, disciplina4, disciplina5 FROM estucad WHERE id = ?";
            buscaStmt = (PreparedStatement) conn.prepareStatement(buscaSql);
            buscaStmt.setString(1, estudanteId);

            rs = buscaStmt.executeQuery();

            if (rs.next()) {
                String[] disciplinas = new String[5];
                disciplinas[0] = rs.getString("disciplina1");
                disciplinas[1] = rs.getString("disciplina2");
                disciplinas[2] = rs.getString("disciplina3");
                disciplinas[3] = rs.getString("disciplina4");
                disciplinas[4] = rs.getString("disciplina5");

                String disciplinaNova = dispreg.getText().trim();
                if (disciplinaNova.isEmpty()) {
                    disciplinaNova = "Sem Matéria";
                }

                for (String disc : disciplinas) {
                    if (disc != null && disc.equalsIgnoreCase(disciplinaNova)) {
                        JOptionPane.showMessageDialog(this, "A disciplina " + disciplinaNova + " já está cadastrada.");
                        return;
                    }
                }

                boolean atualizada = false;
                for (int i = 0; i < disciplinas.length; i++) {
                    if (disciplinas[i] == null || disciplinas[i].equalsIgnoreCase("Sem Matéria")) {
                        disciplinas[i] = disciplinaNova;
                        atualizada = true;
                        break;
                    }
                }

                if (!atualizada) {
                    disciplinas[0] = disciplinaNova;
                }

                String atualizaSql = "UPDATE estucad SET disciplina1 = ?, disciplina2 = ?, disciplina3 = ?, disciplina4 = ?, disciplina5 = ? WHERE id = ?";
                atualizaStmt = (PreparedStatement) conn.prepareStatement(atualizaSql);
                for (int i = 0; i < disciplinas.length; i++) {
                    atualizaStmt.setString(i + 1, disciplinas[i]);
                }
                atualizaStmt.setString(6, estudanteId);

                int rowsUpdated = atualizaStmt.executeUpdate();
                if (rowsUpdated > 0) {
                    
                    String buscaNomeCursoSql = "SELECT nome, curso FROM estucad WHERE id = ?";
                    PreparedStatement buscaNomeCursoStmt = (PreparedStatement) conn.prepareStatement(buscaNomeCursoSql);
                    buscaNomeCursoStmt.setString(1, estudanteId);
                    ResultSet nomeCursoRs = buscaNomeCursoStmt.executeQuery();

                    if (nomeCursoRs.next()) {
                        String nome = nomeCursoRs.getString("nome");
                        String curso = nomeCursoRs.getString("curso");

                        
                        String deletaNotasSql = "DELETE FROM notas WHERE id = ? AND disciplina IN (?, ?, ?, ?, ?)";
                        deletaNotasStmt = (PreparedStatement) conn.prepareStatement(deletaNotasSql);
                        deletaNotasStmt.setString(1, estudanteId);
                        for (int i = 0; i < disciplinas.length; i++) {
                            deletaNotasStmt.setString(i + 2, disciplinas[i]);
                        }
                        deletaNotasStmt.executeUpdate();

                       
                        String insereNotasSql = "INSERT INTO notas (id, nome, curso, disciplina) VALUES (?, ?, ?, ?)";
                        insereNotasStmt = (PreparedStatement) conn.prepareStatement(insereNotasSql);
                        for (String disciplina : disciplinas) {
                            if (!disciplina.equalsIgnoreCase("Sem Matéria")) {
                                insereNotasStmt.setString(1, estudanteId);
                                insereNotasStmt.setString(2, nome);
                                insereNotasStmt.setString(3, curso);
                                insereNotasStmt.setString(4, disciplina);
                                insereNotasStmt.executeUpdate();
                            }
                        }
                        JOptionPane.showMessageDialog(this, "Disciplina registrada com sucesso!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Erro ao buscar nome e curso do estudante.");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao registrar a disciplina.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Não foi possível obter as disciplinas do estudante.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "O estudante não está cadastrado.");
        }
    }
} catch (Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Erro ao registrar a disciplina: " + e.getMessage());
} finally {
    try {
        if (rs != null) rs.close();
        if (verificaStmt != null) verificaStmt.close();
        if (buscaStmt != null) buscaStmt.close();
        if (atualizaStmt != null) atualizaStmt.close();
        if (insereNotasStmt != null) insereNotasStmt.close();
        if (deletaNotasStmt != null) deletaNotasStmt.close();
        if (conn != null) conn.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
}
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        serchstu2 obj=new serchstu2();
        obj.setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
 Connection conn = null;
PreparedStatement verificaStmt = null;
ResultSet rs = null;

try {
    conn = (Connection) Conexao.obterConexao();

    String estudanteId = estura.getText().trim();
    if (estudanteId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, insira o ID do estudante.");
        return;
    }

   
    String verificaSql = "SELECT disciplina1, disciplina2, disciplina3, disciplina4, disciplina5, curso FROM estucad WHERE id = ?";
    verificaStmt = (PreparedStatement) conn.prepareStatement(verificaSql);
    verificaStmt.setString(1, estudanteId);

    rs = verificaStmt.executeQuery();

    if (rs.next()) {
        
        String[] disciplinas = new String[5];
        disciplinas[0] = rs.getString("disciplina1");
        disciplinas[1] = rs.getString("disciplina2");
        disciplinas[2] = rs.getString("disciplina3");
        disciplinas[3] = rs.getString("disciplina4");
        disciplinas[4] = rs.getString("disciplina5");

       
        for (int i = 0; i < disciplinas.length; i++) {
            if (disciplinas[i] == null || disciplinas[i].isEmpty()) {
                disciplinas[i] = "Sem Matéria";
            }
        }

        estudisciplina1.setText(disciplinas[0]);
        estudisciplina2.setText(disciplinas[1]);
        estudisciplina3.setText(disciplinas[2]);
        estudisciplina4.setText(disciplinas[3]);
        estudisciplina5.setText(disciplinas[4]);
        
      
        String txtCurso = rs.getString("curso");
        
        
        txtCursoSelecionado.setText(txtCurso);
        
    } else {
        JOptionPane.showMessageDialog(this, "O estudante não está cadastrado.");
    }

} catch (Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Erro ao buscar as disciplinas: " + e.getMessage());
} finally {
    try {
        if (rs != null) rs.close();
        if (verificaStmt != null) verificaStmt.close();
        if (conn != null) conn.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
}
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
   Connection conn = null;
    PreparedStatement verificaStmt = null;
    PreparedStatement atualizaStmt = null;
    PreparedStatement deleteNotasStmt = null;
    ResultSet rs = null;

    try {
        conn = (Connection) Conexao.obterConexao();
        
        String estudanteId = estura.getText().trim();
        if (estudanteId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, insira o ID do estudante.");
            return;
        }

        
        String verificaSql = "SELECT COUNT(*) FROM estucad WHERE id = ?";
        verificaStmt = (PreparedStatement) conn.prepareStatement(verificaSql);
        verificaStmt.setString(1, estudanteId);
        rs = verificaStmt.executeQuery();

        if (rs.next() && rs.getInt(1) > 0) {
           
            String atualizaSql = "UPDATE estucad SET disciplina2 = 'Sem Matéria' WHERE id = ?";
            atualizaStmt = (PreparedStatement) conn.prepareStatement(atualizaSql);
            atualizaStmt.setString(1, estudanteId);
            int rowsUpdated = atualizaStmt.executeUpdate();
            
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Disciplina2 atualizada para 'Sem Matéria'.");

                
                String disciplina2 = estudisciplina2.getText().trim();
                if (!disciplina2.equals("Sem Matéria")) {
                    String deleteNotasSql = "DELETE FROM notas WHERE id = ? AND disciplina = ?";
                    deleteNotasStmt = (PreparedStatement) conn.prepareStatement(deleteNotasSql);
                    deleteNotasStmt.setString(1, estudanteId);
                    deleteNotasStmt.setString(2, disciplina2);
                    deleteNotasStmt.executeUpdate();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao atualizar a disciplina2.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "O estudante não está cadastrado.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao atualizar a disciplina2: " + e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (verificaStmt != null) verificaStmt.close();
            if (atualizaStmt != null) atualizaStmt.close();
            if (deleteNotasStmt != null) deleteNotasStmt.close();
            if (conn != null) conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        Connection conn = null;
    PreparedStatement verificaStmt = null;
    PreparedStatement atualizaStmt = null;
    PreparedStatement deleteNotasStmt = null;
    ResultSet rs = null;

    try {
        conn = (Connection) Conexao.obterConexao();
        
        String estudanteId = estura.getText().trim();
        if (estudanteId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, insira o ID do estudante.");
            return;
        }

      
        String verificaSql = "SELECT COUNT(*) FROM estucad WHERE id = ?";
        verificaStmt = (PreparedStatement) conn.prepareStatement(verificaSql);
        verificaStmt.setString(1, estudanteId);
        rs = verificaStmt.executeQuery();

        if (rs.next() && rs.getInt(1) > 0) {
          
            String atualizaSql = "UPDATE estucad SET disciplina3 = 'Sem Matéria' WHERE id = ?";
            atualizaStmt = (PreparedStatement) conn.prepareStatement(atualizaSql);
            atualizaStmt.setString(1, estudanteId);
            int rowsUpdated = atualizaStmt.executeUpdate();
            
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Disciplina3 atualizada para 'Sem Matéria'.");

            
                String disciplina3 = estudisciplina3.getText().trim();
                if (!disciplina3.equals("Sem Matéria")) {
                    String deleteNotasSql = "DELETE FROM notas WHERE id = ? AND disciplina = ?";
                    deleteNotasStmt = (PreparedStatement) conn.prepareStatement(deleteNotasSql);
                    deleteNotasStmt.setString(1, estudanteId);
                    deleteNotasStmt.setString(2, disciplina3);
                    deleteNotasStmt.executeUpdate();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao atualizar a disciplina3.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "O estudante não está cadastrado.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao atualizar a disciplina3: " + e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (verificaStmt != null) verificaStmt.close();
            if (atualizaStmt != null) atualizaStmt.close();
            if (deleteNotasStmt != null) deleteNotasStmt.close();
            if (conn != null) conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
          Connection conn = null;
    PreparedStatement verificaStmt = null;
    PreparedStatement atualizaStmt = null;
    PreparedStatement deleteNotasStmt = null;
    ResultSet rs = null;

    try {
        conn = (Connection) Conexao.obterConexao();
        
        String estudanteId = estura.getText().trim();
        if (estudanteId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, insira o ID do estudante.");
            return;
        }

       
        String verificaSql = "SELECT COUNT(*) FROM estucad WHERE id = ?";
        verificaStmt = (PreparedStatement) conn.prepareStatement(verificaSql);
        verificaStmt.setString(1, estudanteId);
        rs = verificaStmt.executeQuery();

        if (rs.next() && rs.getInt(1) > 0) {
           
            String atualizaSql = "UPDATE estucad SET disciplina4 = 'Sem Matéria' WHERE id = ?";
            atualizaStmt = (PreparedStatement) conn.prepareStatement(atualizaSql);
            atualizaStmt.setString(1, estudanteId);
            int rowsUpdated = atualizaStmt.executeUpdate();
            
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Disciplina4 atualizada para 'Sem Matéria'.");

                
                String disciplina4 = estudisciplina4.getText().trim();
                if (!disciplina4.equals("Sem Matéria")) {
                    String deleteNotasSql = "DELETE FROM notas WHERE id = ? AND disciplina = ?";
                    deleteNotasStmt = (PreparedStatement) conn.prepareStatement(deleteNotasSql);
                    deleteNotasStmt.setString(1, estudanteId);
                    deleteNotasStmt.setString(2, disciplina4);
                    deleteNotasStmt.executeUpdate();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao atualizar a disciplina4.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "O estudante não está cadastrado.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao atualizar a disciplina4: " + e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (verificaStmt != null) verificaStmt.close();
            if (atualizaStmt != null) atualizaStmt.close();
            if (deleteNotasStmt != null) deleteNotasStmt.close();
            if (conn != null) conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
         Connection conn = null;
    PreparedStatement verificaStmt = null;
    PreparedStatement atualizaStmt = null;
    PreparedStatement deleteNotasStmt = null;
    ResultSet rs = null;

    try {
        conn = (Connection) Conexao.obterConexao();
        
        String estudanteId = estura.getText().trim();
        if (estudanteId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, insira o ID do estudante.");
            return;
        }

     
        String verificaSql = "SELECT COUNT(*) FROM estucad WHERE id = ?";
        verificaStmt = (PreparedStatement) conn.prepareStatement(verificaSql);
        verificaStmt.setString(1, estudanteId);
        rs = verificaStmt.executeQuery();

        if (rs.next() && rs.getInt(1) > 0) {
           
            String atualizaSql = "UPDATE estucad SET disciplina5 = 'Sem Matéria' WHERE id = ?";
            atualizaStmt = (PreparedStatement) conn.prepareStatement(atualizaSql);
            atualizaStmt.setString(1, estudanteId);
            int rowsUpdated = atualizaStmt.executeUpdate();
            
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Disciplina5 atualizada para 'Sem Matéria'.");

             
                String disciplina5 = estudisciplina5.getText().trim();
                if (!disciplina5.equals("Sem Matéria")) {
                    String deleteNotasSql = "DELETE FROM notas WHERE id = ? AND disciplina = ?";
                    deleteNotasStmt = (PreparedStatement) conn.prepareStatement(deleteNotasSql);
                    deleteNotasStmt.setString(1, estudanteId);
                    deleteNotasStmt.setString(2, disciplina5);
                    deleteNotasStmt.executeUpdate();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao atualizar a disciplina5.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "O estudante não está cadastrado.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao atualizar a disciplina5: " + e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (verificaStmt != null) verificaStmt.close();
            if (atualizaStmt != null) atualizaStmt.close();
            if (deleteNotasStmt != null) deleteNotasStmt.close();
            if (conn != null) conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        
        }
    }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void cmbCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCursosActionPerformed
       String cursoSelecionado = cmbCursos.getSelectedItem().toString();
       txtCursoSelecionado.setText(cursoSelecionado);
    }//GEN-LAST:event_cmbCursosActionPerformed

    private void txtCursoSelecionadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCursoSelecionadoActionPerformed
       
    }//GEN-LAST:event_txtCursoSelecionadoActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
    Connection conn = null;
PreparedStatement verificaStmt = null;
PreparedStatement buscaNomeStmt = null;
PreparedStatement atualizaStmt = null;
PreparedStatement buscaTurmaStmt = null;
PreparedStatement atualizaTurmaStmt = null;
PreparedStatement insereNotasStmt = null;
PreparedStatement deletaNotasStmt = null;
ResultSet rs = null;
ResultSet nomeRs = null;

try {
    conn = (Connection) Conexao.obterConexao();

    String estudanteId = estura.getText().trim();
    if (estudanteId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Impossível registrar, pois falta o RA do aluno.");
        return;
    }

    String verificaSql = "SELECT COUNT(*) FROM estucad WHERE id = ?";
    verificaStmt = (PreparedStatement) conn.prepareStatement(verificaSql);
    verificaStmt.setString(1, estudanteId);

    rs = verificaStmt.executeQuery();

    if (rs.next() && rs.getInt(1) > 0) {
        String buscaNomeSql = "SELECT nome, curso, turma FROM estucad WHERE id = ?";
        buscaNomeStmt = (PreparedStatement) conn.prepareStatement(buscaNomeSql);
        buscaNomeStmt.setString(1, estudanteId);

        nomeRs = buscaNomeStmt.executeQuery();

        String estudanteNome = null;
        String cursoAtual = null;
        String turmaAtual = null;
        if (nomeRs.next()) {
            estudanteNome = nomeRs.getString("nome");
            cursoAtual = nomeRs.getString("curso");
            turmaAtual = nomeRs.getString("turma");
        }

        if (estudanteNome == null || estudanteNome.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nome do estudante não encontrado.");
            return;
        }

        String cursoSelecionado = (String) cmbCursos.getSelectedItem();
        String disciplina1 = "", disciplina2 = "", disciplina3 = "", disciplina4 = "", disciplina5 = "";
        String coluna1 = "", coluna2 = "";

        switch (cursoSelecionado) {
            case "Análise e Desenvolvimento de Sistemas":
                disciplina1 = "Analise de Dados em Python";
                disciplina2 = "Modelagem de Software";
                disciplina3 = "Principios de Programação";
                disciplina4 = "Desenvolvimento web e Mobile";
                disciplina5 = "Vida e Carreira";
                coluna1 = "TurmaADS1";
                coluna2 = "TurmaADS2";
                break;
            case "Ciência da Computação":
                disciplina1 = "Calculo I";
                disciplina2 = "Principios de Programação";
                disciplina3 = "Analise de Dados em Python";
                disciplina4 = "Modelagem de Software";
                disciplina5 = "Vida e Carreira";
                coluna1 = "TurmaCC1";
                coluna2 = "TurmaCC2";
                break;
            case "Teatro":
                disciplina1 = "Analise critica";
                disciplina2 = "Corpo e Voz";
                disciplina3 = "Historia da Arte";
                disciplina4 = "Cinematografia";
                disciplina5 = "Vida e Carreira";
                coluna1 = "TurmaTeatro1";
                coluna2 = "TurmaTeatro2";
                break;
            case "Sem Curso":
                disciplina1 = "Sem Matéria";
                disciplina2 = "Sem Matéria";
                disciplina3 = "Sem Matéria";
                disciplina4 = "Sem Matéria";
                disciplina5 = "Sem Matéria";
                coluna1 = "SemTurma";
                coluna2 = "SemTurma";
                break;
        }

        // Atualizar curso e disciplinas no estucad
        String atualizaSql = "UPDATE estucad SET curso = ?, disciplina1 = ?, disciplina2 = ?, disciplina3 = ?, disciplina4 = ?, disciplina5 = ? WHERE id = ?";
        atualizaStmt = (PreparedStatement) conn.prepareStatement(atualizaSql);
        atualizaStmt.setString(1, cursoSelecionado);
        atualizaStmt.setString(2, disciplina1);
        atualizaStmt.setString(3, disciplina2);
        atualizaStmt.setString(4, disciplina3);
        atualizaStmt.setString(5, disciplina4);
        atualizaStmt.setString(6, disciplina5);
        atualizaStmt.setString(7, estudanteId);

        int rowsUpdated = atualizaStmt.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Curso e disciplinas atualizados com sucesso!");
            txtCursoSelecionado.setText(cursoSelecionado);
            estudisciplina1.setText(disciplina1);
            estudisciplina2.setText(disciplina2);
            estudisciplina3.setText(disciplina3);
            estudisciplina4.setText(disciplina4);
            estudisciplina5.setText(disciplina5);
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar curso e disciplinas.");
            return;
        }

        // Remover aluno das turmas anteriores, incluindo SemTurma
        String removeAlunoSql = "UPDATE turma SET " +
                                "TurmaADS1 = TRIM(BOTH ',' FROM REPLACE(REPLACE(TurmaADS1, ?, ''), ',,', ',')), " +
                                "TurmaADS2 = TRIM(BOTH ',' FROM REPLACE(REPLACE(TurmaADS2, ?, ''), ',,', ',')), " +
                                "TurmaCC1 = TRIM(BOTH ',' FROM REPLACE(REPLACE(TurmaCC1, ?, ''), ',,', ',')), " +
                                "TurmaCC2 = TRIM(BOTH ',' FROM REPLACE(REPLACE(TurmaCC2, ?, ''), ',,', ',')), " +
                                "TurmaTeatro1 = TRIM(BOTH ',' FROM REPLACE(REPLACE(TurmaTeatro1, ?, ''), ',,', ',')), " +
                                "TurmaTeatro2 = TRIM(BOTH ',' FROM REPLACE(REPLACE(TurmaTeatro2, ?, ''), ',,', ',')), " +
                                "SemTurma = TRIM(BOTH ',' FROM REPLACE(REPLACE(SemTurma, ?, ''), ',,', ','))";
        atualizaStmt = (PreparedStatement) conn.prepareStatement(removeAlunoSql);
        String alunoInfo = estudanteId + " - " + estudanteNome;
        for (int i = 1; i <= 7; i++) {
            atualizaStmt.setString(i, alunoInfo);
        }
        atualizaStmt.executeUpdate();

        // Verificar se o aluno já está na turma correta
        String buscaTurmaSql = "SELECT " + coluna1 + ", " + coluna2 + " FROM turma";
        buscaTurmaStmt = (PreparedStatement) conn.prepareStatement(buscaTurmaSql);
        rs = buscaTurmaStmt.executeQuery();

        boolean alunoPresente = false;
        if (rs.next()) {
            String turma1 = rs.getString(coluna1);
            String turma2 = rs.getString(coluna2);

            if ((turma1 != null && turma1.contains(alunoInfo)) || (turma2 != null && turma2.contains(alunoInfo))) {
                alunoPresente = true;
            }
        }

        if (alunoPresente) {
            JOptionPane.showMessageDialog(this, "O aluno já está registrado na turma correta.");
            return;
        }

        // Adicionar aluno à turma correta
        String turma1 = null;
        String turma2 = null;

        buscaTurmaSql = "SELECT " + coluna1 + ", " + coluna2 + " FROM turma";
        buscaTurmaStmt = (PreparedStatement) conn.prepareStatement(buscaTurmaSql);
        rs = buscaTurmaStmt.executeQuery();

        String colunaUsada = "";
        if (rs.next()) {
            turma1 = rs.getString(coluna1);
            turma2 = rs.getString(coluna2);
        }

        if (turma1 == null || turma1.isEmpty() || turma1.split(", ").length < 30) {
            if (turma1 == null || turma1.isEmpty()) {
                turma1 = alunoInfo;
            } else {
                turma1 += ", " + alunoInfo;
            }
            String atualizaTurmaSql = "UPDATE turma SET " + coluna1 + " = ?";
            atualizaTurmaStmt = (PreparedStatement) conn.prepareStatement(atualizaTurmaSql);
            atualizaTurmaStmt.setString(1, turma1);
            colunaUsada = coluna1;
        } else if (turma2 == null || turma2.isEmpty() || turma2.split(", ").length < 30) {
            if (turma2 == null || turma2.isEmpty()) {
                turma2 = alunoInfo;
            } else {
                turma2 += ", " + alunoInfo;
            }
            String atualizaTurmaSql = "UPDATE turma SET " + coluna2 + " = ?";
            atualizaTurmaStmt = (PreparedStatement) conn.prepareStatement(atualizaTurmaSql);
            atualizaTurmaStmt.setString(1, turma2);
            colunaUsada = coluna2;
        } else {
            JOptionPane.showMessageDialog(this, "Turmas do curso selecionado estão lotadas.");
            return;
        }
        atualizaTurmaStmt.executeUpdate();

        // Atualizar coluna turma no estucad
        String atualizaColunaTurmaSql = "UPDATE estucad SET turma = ? WHERE id = ?";
        PreparedStatement atualizaColunaTurmaStmt = (PreparedStatement) conn.prepareStatement(atualizaColunaTurmaSql);
        atualizaColunaTurmaStmt.setString(1, colunaUsada);
        atualizaColunaTurmaStmt.setString(2, estudanteId);
        atualizaColunaTurmaStmt.executeUpdate();
        atualizaColunaTurmaStmt.close();

        JOptionPane.showMessageDialog(this, "Aluno registrado na turma com sucesso!");

        // Deletar notas antigas
        String deletaNotasSql = "DELETE FROM notas WHERE id = ?";
        deletaNotasStmt = (PreparedStatement) conn.prepareStatement(deletaNotasSql);
        deletaNotasStmt.setString(1, estudanteId);
        deletaNotasStmt.executeUpdate();

        // Inserir novas notas
        if (!cursoSelecionado.equals("Sem Curso")) {
            String insereNotasSql = "INSERT INTO notas (id, nome, curso, disciplina, feedback, presenca) VALUES (?, ?, ?, ?, ?, ?)";
            insereNotasStmt = (PreparedStatement) conn.prepareStatement(insereNotasSql);
            String[] disciplinas = {disciplina1, disciplina2, disciplina3, disciplina4, disciplina5};
            for (String disciplina : disciplinas) {
                insereNotasStmt.setString(1, estudanteId);
                insereNotasStmt.setString(2, estudanteNome);
                insereNotasStmt.setString(3, cursoSelecionado);
                insereNotasStmt.setString(4, disciplina);
                insereNotasStmt.setString(5, "Sem Comentários");
                insereNotasStmt.setString(6, " ");
                insereNotasStmt.executeUpdate();
            }
        }

    } else {
        JOptionPane.showMessageDialog(this, "O estudante não está cadastrado.");
    }
} catch (Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Erro ao atualizar curso e disciplinas: " + e.getMessage());
} finally {
    try {
        if (nomeRs != null) nomeRs.close();
        if (rs != null) rs.close();
        if (verificaStmt != null) verificaStmt.close();
        if (buscaNomeStmt != null) buscaNomeStmt.close();
        if (atualizaStmt != null) atualizaStmt.close();
        if (buscaTurmaStmt != null) buscaTurmaStmt.close();
        if (atualizaTurmaStmt != null) atualizaTurmaStmt.close();
        if (insereNotasStmt != null) insereNotasStmt.close();
        if (deletaNotasStmt != null) deletaNotasStmt.close();
        if (conn != null) conn.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}
    }//GEN-LAST:event_jButton12ActionPerformed

    private void esturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_esturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_esturaActionPerformed

    private void estudisciplina1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estudisciplina1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_estudisciplina1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addestumat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addestumat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addestumat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addestumat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addestumat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbCursos;
    private javax.swing.JComboBox<String> displist;
    private javax.swing.JTextField dispreg;
    private javax.swing.JTextField estudisciplina1;
    private javax.swing.JTextField estudisciplina2;
    private javax.swing.JTextField estudisciplina3;
    private javax.swing.JTextField estudisciplina4;
    private javax.swing.JTextField estudisciplina5;
    private javax.swing.JTextField estura;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField txtCursoSelecionado;
    // End of variables declaration//GEN-END:variables
}
