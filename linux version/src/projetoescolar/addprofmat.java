/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projetoescolar;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.ResultSetImpl;
import java.awt.Color;
import java.sql.ResultSet;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lucas
 */
public class addprofmat extends javax.swing.JFrame {

    /**
     * Creates new form addprofmat
     */
    public addprofmat() {
        initComponents();
        profdisciplina.setEditable(false); 
        dispreg.setEditable(false); 
        turmreg.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displist = new javax.swing.JComboBox<>();
        dispreg = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        profid = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        profdisciplina = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        profdisciplina3 = new javax.swing.JTextField();
        profdisciplina2 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        turmlist = new javax.swing.JComboBox<>();
        jButton10 = new javax.swing.JButton();
        turmreg = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(700, 430));
        getContentPane().setLayout(null);

        displist.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sem Matéria", "Analise de Dados em Python", "Analise critica ", "Calculo I", "Cinematografia", "Corpo e Voz", "Desenvolvimento web e Mobile", "Historia da Arte", "Modelagem de Software", "Principios de Programação", "Vida e Carreira", "Banco De Dados", "Mat. Basica", "Fotografia", " " }));
        displist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displistActionPerformed(evt);
            }
        });
        getContentPane().add(displist);
        displist.setBounds(153, 236, 427, 23);

        dispreg.setBackground(new java.awt.Color(255, 255, 255));
        dispreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispregActionPerformed(evt);
            }
        });
        getContentPane().add(dispreg);
        dispreg.setBounds(153, 267, 427, 23);

        jButton4.setBackground(new java.awt.Color(204, 204, 204));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 102, 0));
        jButton4.setText("Registrar");
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(586, 267, 102, 23);

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Disciplinas:");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(30, 224, 117, 40);

        profid.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(profid);
        profid.setBounds(155, 90, 427, 23);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Usuário ID:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(9, 90, 114, 22);

        jButton5.setBackground(new java.awt.Color(204, 204, 204));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(102, 0, 0));
        jButton5.setText("Deletar");
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(588, 124, 89, 23);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/backbutton small3.png"))); // NOI18N
        jLabel2.setText("Voltar");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel2);
        jLabel2.setBounds(568, 6, 100, 50);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Atual:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 140, 140, 22);

        profdisciplina.setBackground(new java.awt.Color(255, 255, 255));
        profdisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profdisciplinaActionPerformed(evt);
            }
        });
        getContentPane().add(profdisciplina);
        profdisciplina.setBounds(155, 124, 427, 23);

        jButton6.setBackground(new java.awt.Color(204, 204, 204));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(0, 102, 0));
        jButton6.setText("Procurar");
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(588, 90, 99, 23);

        jButton7.setBackground(new java.awt.Color(204, 204, 204));
        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton7.setForeground(new java.awt.Color(0, 102, 0));
        jButton7.setText("Abrir Tabela de ID");
        jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7);
        jButton7.setBounds(215, 46, 339, 28);

        profdisciplina3.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(profdisciplina3);
        profdisciplina3.setBounds(156, 190, 427, 23);

        profdisciplina2.setBackground(new java.awt.Color(255, 255, 255));
        profdisciplina2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profdisciplina2ActionPerformed(evt);
            }
        });
        getContentPane().add(profdisciplina2);
        profdisciplina2.setBounds(156, 157, 427, 23);

        jButton8.setBackground(new java.awt.Color(204, 204, 204));
        jButton8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton8.setForeground(new java.awt.Color(102, 0, 0));
        jButton8.setText("Deletar");
        jButton8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8);
        jButton8.setBounds(589, 157, 88, 23);

        jButton9.setBackground(new java.awt.Color(204, 204, 204));
        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton9.setForeground(new java.awt.Color(102, 0, 0));
        jButton9.setText("Deletar");
        jButton9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton9);
        jButton9.setBounds(589, 190, 88, 23);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Turma:");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(75, 317, 71, 22);

        turmlist.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sem Turma", "TurmaADS1", "TurmaADS2", "TurmaTeatro1", "TurmaTeatro2", "TurmaCC1\t", "TurmaCC2" }));
        turmlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turmlistActionPerformed(evt);
            }
        });
        getContentPane().add(turmlist);
        turmlist.setBounds(153, 318, 427, 23);

        jButton10.setBackground(new java.awt.Color(204, 204, 204));
        jButton10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton10.setForeground(new java.awt.Color(0, 102, 0));
        jButton10.setText("Registrar");
        jButton10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton10);
        jButton10.setBounds(586, 351, 102, 23);

        turmreg.setBackground(new java.awt.Color(255, 255, 255));
        turmreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turmregActionPerformed(evt);
            }
        });
        getContentPane().add(turmreg);
        turmreg.setBounds(153, 351, 427, 23);

        jButton11.setBackground(new java.awt.Color(204, 204, 204));
        jButton11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton11.setForeground(new java.awt.Color(102, 0, 0));
        jButton11.setText("Deletar");
        jButton11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton11);
        jButton11.setBounds(586, 318, 91, 23);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Adicionar Matéria");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(200, 0, 370, 43);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/ilive logo small adm.png"))); // NOI18N
        getContentPane().add(jLabel6);
        jLabel6.setBounds(-30, -20, 156, 120);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Disciplina ");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 120, 140, 22);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/colorful_background_7.jpg"))); // NOI18N
        getContentPane().add(jLabel7);
        jLabel7.setBounds(-1190, -340, 1930, 860);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void displistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displistActionPerformed
        String disciplinaSelecionada = displist.getSelectedItem().toString();
        dispreg.setText(disciplinaSelecionada);
    }//GEN-LAST:event_displistActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
   Connection conn = null;
PreparedStatement verificaStmt = null;
PreparedStatement atualizaStmt = null;
ResultSet rs = null;

try {
    conn = (Connection) Conexao.obterConexao();

    String profId = profid.getText().trim();
    String disciplina = dispreg.getText().trim();
    if (disciplina.isEmpty()) {
        disciplina = "Sem Matéria";
    }

    
    String verificaSql = "SELECT disciplinas, disciplinas2, disciplinas3 FROM profcad WHERE id = ?";
    verificaStmt = (PreparedStatement) conn.prepareStatement(verificaSql);
    verificaStmt.setString(1, profId);

    rs = verificaStmt.executeQuery();

    if (rs.next()) {
       
        String disciplinas = rs.getString("disciplinas");
        String disciplinas2 = rs.getString("disciplinas2");
        String disciplinas3 = rs.getString("disciplinas3");

       
        if (disciplina.equals(disciplinas) || disciplina.equals(disciplinas2) || disciplina.equals(disciplinas3)) {
            JOptionPane.showMessageDialog(this, "A matéria já está cadastrada para este professor.");
        } else {
            
            if (!disciplinas.equals("Sem Matéria") && !disciplinas2.equals("Sem Matéria") && !disciplinas3.equals("Sem Matéria")) {
                JOptionPane.showMessageDialog(this, "Todas as matérias estão preenchidas. É necessário excluir uma para adicionar outra.");
            } else {
                // Atualiza o banco de dados com a nova disciplina
                String atualizaSql;
                if (disciplinas.equals("Sem Matéria")) {
                    atualizaSql = "UPDATE profcad SET disciplinas = ? WHERE id = ?";
                } else if (disciplinas2.equals("Sem Matéria")) {
                    atualizaSql = "UPDATE profcad SET disciplinas2 = ? WHERE id = ?";
                } else {
                    atualizaSql = "UPDATE profcad SET disciplinas3 = ? WHERE id = ?";
                }
                atualizaStmt = (PreparedStatement) conn.prepareStatement(atualizaSql);
                atualizaStmt.setString(1, disciplina);
                atualizaStmt.setString(2, profId);

                int rowsUpdated = atualizaStmt.executeUpdate();
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(this, "Disciplina registrada com sucesso!");
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao registrar a disciplina.");
                }
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "O professor não está cadastrado.");
    }

} catch (Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Erro ao registrar a disciplina: " + e.getMessage());
} finally {
    try {
        if (rs != null) rs.close();
        if (verificaStmt != null) verificaStmt.close();
        if (atualizaStmt != null) atualizaStmt.close();
        if (conn != null) conn.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
}
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
    Connection conn = null;
    PreparedStatement deleteStmt = null;
    
    try {
        conn = (Connection) Conexao.obterConexao();
        
        
        String professorId = profid.getText().trim();
        if (professorId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, insira o ID do professor.");
            return;
        }
        
        
        String deleteSql = "UPDATE profcad SET disciplinas = ? WHERE id = ?";
        deleteStmt = (PreparedStatement) conn.prepareStatement(deleteSql);
        deleteStmt.setString(1, "Sem Matéria");
        deleteStmt.setString(2, professorId);
        
        int rowsUpdated = deleteStmt.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Matéria atual deletada.");
        } else {
            JOptionPane.showMessageDialog(this, "Não foi possível deletar a matéria atual.");
        }
        
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao deletar a matéria: " + e.getMessage());
    } finally {
     
        try {
            if (deleteStmt != null) deleteStmt.close();
            if (conn != null) conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        professor obj = new professor();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void dispregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispregActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dispregActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        Connection conn = null;
    PreparedStatement verificaStmt = null;
    PreparedStatement atualizaStmt = null;
    ResultSet rs = null;
    
    try {
        conn = (Connection) Conexao.obterConexao();
        
        
        String verificaSql = "SELECT COUNT(*) FROM profcad WHERE id = ?";
        verificaStmt = (PreparedStatement) conn.prepareStatement(verificaSql);
        verificaStmt.setString(1, profid.getText());
        
        rs = verificaStmt.executeQuery();
        
    
        if (rs.next()) {
            int count = rs.getInt(1);
            if (count > 0) {
              
                String buscaSql = "SELECT disciplinas, disciplinas2, disciplinas3 FROM profcad WHERE id = ?";
                PreparedStatement buscaStmt = (PreparedStatement) conn.prepareStatement(buscaSql);
                buscaStmt.setString(1, profid.getText());
                
                ResultSet resultado = buscaStmt.executeQuery();
                if (resultado.next()) {
                    String disciplinaAtual = resultado.getString("disciplinas");
                    String disciplinaAtual2 = resultado.getString("disciplinas2");
                    String disciplinaAtual3 = resultado.getString("disciplinas3");
                    profdisciplina.setText(disciplinaAtual);
                    profdisciplina2.setText(disciplinaAtual2);
                    profdisciplina3.setText(disciplinaAtual3);
                    
                    
                } else {
                    JOptionPane.showMessageDialog(this, "Não foi possível encontrar a disciplina do professor.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "O professor não está cadastrado.");
            }
        }
        
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao buscar a disciplina: " + e.getMessage());
    } finally {
      
        try {
            if (rs != null) rs.close();
            if (verificaStmt != null) verificaStmt.close();
            if (atualizaStmt != null) atualizaStmt.close();
            if (conn != null) conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        pesquisarprof2 obj=new pesquisarprof2();
        obj.setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
      
    Connection conn = null;
    PreparedStatement deleteStmt = null;
    
    try {
        conn = (Connection) Conexao.obterConexao();
        
        
        String professorId = profid.getText().trim();
        if (professorId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, insira o ID do professor.");
            return;
        }
        
        
        String deleteSql = "UPDATE profcad SET disciplinas2 = ? WHERE id = ?";
        deleteStmt = (PreparedStatement) conn.prepareStatement(deleteSql);
        deleteStmt.setString(1, "Sem Matéria");
        deleteStmt.setString(2, professorId);
        
        int rowsUpdated = deleteStmt.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Matéria atual deletada.");
        } else {
            JOptionPane.showMessageDialog(this, "Não foi possível deletar a matéria atual.");
        }
        
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao deletar a matéria: " + e.getMessage());
    } finally {
     
        try {
            if (deleteStmt != null) deleteStmt.close();
            if (conn != null) conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
            
    Connection conn = null;
    PreparedStatement deleteStmt = null;
    
    try {
        conn = (Connection) Conexao.obterConexao();
        
        
        String professorId = profid.getText().trim();
        if (professorId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, insira o ID do professor.");
            return;
        }
        
        
        String deleteSql = "UPDATE profcad SET disciplinas3 = ? WHERE id = ?";
        deleteStmt = (PreparedStatement) conn.prepareStatement(deleteSql);
        deleteStmt.setString(1, "Sem Matéria");
        deleteStmt.setString(2, professorId);
        
        int rowsUpdated = deleteStmt.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Matéria atual deletada.");
        } else {
            JOptionPane.showMessageDialog(this, "Não foi possível deletar a matéria atual.");
        }
        
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao deletar a matéria: " + e.getMessage());
    } finally {
     
        try {
            if (deleteStmt != null) deleteStmt.close();
            if (conn != null) conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void profdisciplina2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profdisciplina2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_profdisciplina2ActionPerformed

    private void profdisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profdisciplinaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_profdisciplinaActionPerformed

    private void turmregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turmregActionPerformed
       
    }//GEN-LAST:event_turmregActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
      Connection conn = null;
    PreparedStatement verificaStmt = null;
    PreparedStatement atualizaStmt = null;
    ResultSet rs = null;

    try {
        conn = (Connection) Conexao.obterConexao();

        String profId = profid.getText().trim();
        String turma = turmreg.getText().trim();
        if (turma.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione uma turma.");
            return;
        }

    
        String verificaSql = "SELECT turma1, turma2, turma3 FROM profcad WHERE id = ?";
        verificaStmt = (PreparedStatement) conn.prepareStatement(verificaSql);
        verificaStmt.setString(1, profId);

        rs = verificaStmt.executeQuery();

        if (rs.next()) {
           
            String turma1 = rs.getString("turma1");
            String turma2 = rs.getString("turma2");
            String turma3 = rs.getString("turma3");

         
            if (turma.equals(turma1) || turma.equals(turma2) || turma.equals(turma3)) {
                JOptionPane.showMessageDialog(this, "A turma já está cadastrada para este professor.");
            } else {
              
                String atualizaSql = null;
                if (turma1.equals("Sem Turma")) {
                    atualizaSql = "UPDATE profcad SET turma1 = ? WHERE id = ?";
                } else if (turma2.equals("Sem Turma")) {
                    atualizaSql = "UPDATE profcad SET turma2 = ? WHERE id = ?";
                } else if (turma3.equals("Sem Turma")) {
                    atualizaSql = "UPDATE profcad SET turma3 = ? WHERE id = ?";
                } else {
                 
                    if (!turma1.equals("Sem Turma") && !turma2.equals("Sem Turma") && !turma3.equals("Sem Turma")) {
                        JOptionPane.showMessageDialog(this, "Todas as turmas estão preenchidas. É necessário excluir uma para adicionar outra.");
                        return;
                    }
                }
                atualizaStmt = (PreparedStatement) conn.prepareStatement(atualizaSql);
                atualizaStmt.setString(1, turma);
                atualizaStmt.setString(2, profId);

                int rowsUpdated = atualizaStmt.executeUpdate();
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(this, "Turma registrada com sucesso!");
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao registrar a turma.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "O professor não está cadastrado.");
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao registrar a turma: " + e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (verificaStmt != null) verificaStmt.close();
            if (atualizaStmt != null) atualizaStmt.close();
            if (conn != null) conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void turmlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turmlistActionPerformed
       String turmaSelecionada = turmlist.getSelectedItem().toString();
        turmreg.setText(turmaSelecionada);
    }//GEN-LAST:event_turmlistActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        Connection conn = null;
    PreparedStatement deleteStmt = null;

    try {
        conn = (Connection) Conexao.obterConexao();

        String profId = profid.getText().trim();
        String turma = turmreg.getText().trim();
        if (profId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, insira o ID do professor.");
            return;
        }

        if (turma.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione uma turma.");
            return;
        }

       
        String verificaSql = "SELECT turma1, turma2, turma3 FROM profcad WHERE id = ?";
        PreparedStatement verificaStmt = (PreparedStatement) conn.prepareStatement(verificaSql);
        verificaStmt.setString(1, profId);

        ResultSet rs = verificaStmt.executeQuery();

        if (rs.next()) {
          
            String turma1 = rs.getString("turma1");
            String turma2 = rs.getString("turma2");
            String turma3 = rs.getString("turma3");

            String deleteSql = null;
            if (turma.equals(turma1)) {
                deleteSql = "UPDATE profcad SET turma1 = 'Sem Turma' WHERE id = ?";
            } else if (turma.equals(turma2)) {
                deleteSql = "UPDATE profcad SET turma2 = 'Sem Turma' WHERE id = ?";
            } else if (turma.equals(turma3)) {
                deleteSql = "UPDATE profcad SET turma3 = 'Sem Turma' WHERE id = ?";
            } else {
                JOptionPane.showMessageDialog(this, "A turma selecionada não está cadastrada.");
                return;
            }

            deleteStmt = (PreparedStatement) conn.prepareStatement(deleteSql);
            deleteStmt.setString(1, profId);

            int rowsUpdated = deleteStmt.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Turma deletada com sucesso!");
            } else {
                JOptionPane.showMessageDialog(this, "Não foi possível deletar a turma.");
            }

        } else {
            JOptionPane.showMessageDialog(this, "O professor não está cadastrado.");
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao deletar a turma: " + e.getMessage());
    } finally {
        try {
            if (deleteStmt != null) deleteStmt.close();
            if (conn != null) conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addprofmat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addprofmat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addprofmat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addprofmat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addprofmat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> displist;
    private javax.swing.JTextField dispreg;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField profdisciplina;
    private javax.swing.JTextField profdisciplina2;
    private javax.swing.JTextField profdisciplina3;
    private javax.swing.JTextField profid;
    private javax.swing.JComboBox<String> turmlist;
    private javax.swing.JTextField turmreg;
    // End of variables declaration//GEN-END:variables
}
