/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projetoescolar;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.ResultSetImpl;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.*;
import java.awt.event.*;
import java.sql.*;
import projetoescolar.SessaoUsuario;

/**
 *
 * @author Lucas
 */
public class relatoriosproff extends javax.swing.JFrame {

    /**
     * Creates new form relatoriosproff
     */
    public relatoriosproff() {
        initComponents();
        estunome.setEditable(false);
        estuturma.setEditable(false);
        estucurso.setEditable(false);
        dispreg.setEditable(false);
         estunome.setBackground(Color.LIGHT_GRAY);
          estuturma.setBackground(Color.LIGHT_GRAY);
           estucurso.setBackground(Color.LIGHT_GRAY);
             dispreg.setBackground(Color.LIGHT_GRAY);
                pres.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (pres.isSelected()) {
                    falt.setEnabled(false);
                } else {
                    falt.setEnabled(true);
                }
            }
        });

        falt.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (falt.isSelected()) {
                    pres.setEnabled(false);
                } else {
                    pres.setEnabled(true);
                }
            }
        });

        registrardata.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                registrardataActionPerformed(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        estunome = new javax.swing.JTextField();
        estura = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        registrar = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        displist = new javax.swing.JComboBox<>();
        dispreg = new javax.swing.JTextField();
        notatrabalho = new javax.swing.JTextField();
        nota2 = new javax.swing.JTextField();
        listadealunos = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        estuturma = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        pesquisar = new javax.swing.JButton();
        nota1 = new javax.swing.JTextField();
        estucurso = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        feedback = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        registrardata = new javax.swing.JButton();
        pres = new javax.swing.JCheckBox();
        falt = new javax.swing.JCheckBox();
        data = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(956, 543));
        getContentPane().setLayout(null);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Notas:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(12, 210, 87, 29);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Relatorios dos Estudantes");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(150, 0, 531, 43);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Nome: ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(32, 114, 70, 22);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Curso:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(32, 144, 65, 22);

        estunome.setBackground(new java.awt.Color(255, 255, 255));
        estunome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estunomeActionPerformed(evt);
            }
        });
        getContentPane().add(estunome);
        estunome.setBounds(167, 108, 394, 30);

        estura.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(estura);
        estura.setBounds(167, 73, 112, 30);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Prova 1:");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(12, 245, 84, 22);

        registrar.setBackground(new java.awt.Color(204, 204, 204));
        registrar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        registrar.setForeground(new java.awt.Color(0, 102, 0));
        registrar.setText("Registrar");
        registrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarActionPerformed(evt);
            }
        });
        getContentPane().add(registrar);
        registrar.setBounds(430, 280, 130, 28);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Prova 2:");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(154, 245, 84, 22);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Trabalho:");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(296, 245, 96, 22);

        displist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displistActionPerformed(evt);
            }
        });
        getContentPane().add(displist);
        displist.setBounds(6, 352, 317, 23);

        dispreg.setBackground(new java.awt.Color(255, 255, 255));
        dispreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispregActionPerformed(evt);
            }
        });
        getContentPane().add(dispreg);
        dispreg.setBounds(6, 380, 317, 30);

        notatrabalho.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(notatrabalho);
        notatrabalho.setBounds(296, 280, 124, 30);

        nota2.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(nota2);
        nota2.setBounds(154, 280, 124, 30);

        listadealunos.setBackground(new java.awt.Color(204, 204, 204));
        listadealunos.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        listadealunos.setForeground(new java.awt.Color(0, 102, 0));
        listadealunos.setText("Alunos");
        listadealunos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        listadealunos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listadealunosActionPerformed(evt);
            }
        });
        getContentPane().add(listadealunos);
        listadealunos.setBounds(420, 72, 140, 28);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("RA:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(32, 81, 35, 22);

        estuturma.setBackground(new java.awt.Color(255, 255, 255));
        estuturma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estuturmaActionPerformed(evt);
            }
        });
        getContentPane().add(estuturma);
        estuturma.setBounds(167, 176, 394, 30);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Turma:");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(32, 174, 71, 22);

        pesquisar.setBackground(new java.awt.Color(204, 204, 204));
        pesquisar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        pesquisar.setForeground(new java.awt.Color(0, 102, 0));
        pesquisar.setText("Pesquisar");
        pesquisar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarActionPerformed(evt);
            }
        });
        getContentPane().add(pesquisar);
        pesquisar.setBounds(285, 72, 130, 28);

        nota1.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(nota1);
        nota1.setBounds(12, 280, 124, 30);

        estucurso.setBackground(new java.awt.Color(255, 255, 255));
        estucurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estucursoActionPerformed(evt);
            }
        });
        getContentPane().add(estucurso);
        estucurso.setBounds(167, 142, 394, 30);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Disciplina:");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(6, 323, 106, 22);

        feedback.setColumns(20);
        feedback.setRows(5);
        jScrollPane1.setViewportView(feedback);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(570, 260, 350, 230);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Feedback:");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(680, 230, 138, 29);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setText("Presença:");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(680, 60, 133, 29);

        registrardata.setBackground(new java.awt.Color(204, 204, 204));
        registrardata.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        registrardata.setForeground(new java.awt.Color(0, 102, 0));
        registrardata.setText("Registrar");
        registrardata.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        registrardata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrardataActionPerformed(evt);
            }
        });
        getContentPane().add(registrardata);
        registrardata.setBounds(750, 138, 134, 28);

        pres.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        pres.setForeground(new java.awt.Color(0, 0, 0));
        pres.setText("Presente");
        pres.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(pres);
        pres.setBounds(578, 174, 95, 21);

        falt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        falt.setForeground(new java.awt.Color(0, 0, 0));
        falt.setText("Falta");
        falt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(falt);
        falt.setBounds(671, 174, 60, 21);

        data.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(data);
        data.setBounds(578, 138, 148, 30);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Inserir data:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(600, 110, 126, 22);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 0, 0));
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/backbutton small3.png"))); // NOI18N
        jLabel9.setText("Voltar");
        jLabel9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel9);
        jLabel9.setBounds(800, 10, 110, 50);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/ilive logo small prof.png"))); // NOI18N
        getContentPane().add(jLabel14);
        jLabel14.setBounds(410, 350, 220, 120);

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/colorful_background_7.jpg"))); // NOI18N
        getContentPane().add(jLabel17);
        jLabel17.setBounds(-1930, 0, 2880, 520);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void estunomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estunomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_estunomeActionPerformed

    private void registrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarActionPerformed
 String raAluno = estura.getText().trim(); 
if (raAluno.isEmpty()) {
    JOptionPane.showMessageDialog(this, "Por favor, insira o RA do aluno.");
    return;
}

String disciplinaSelecionada = (String) dispreg.getText(); // Obtém a disciplina selecionada

Connection conn = null;
PreparedStatement stmt = null;

try {
    conn = (Connection) Conexao.obterConexao();

    
    String verificarLinhaSql = "SELECT COUNT(*) FROM notas WHERE id = ? AND disciplina = ?";
    stmt = (PreparedStatement) conn.prepareStatement(verificarLinhaSql);
    stmt.setString(1, raAluno); 
    stmt.setString(2, disciplinaSelecionada); 
    ResultSetImpl rs = (ResultSetImpl) stmt.executeQuery();

    rs.next();
    int rowCount = rs.getInt(1);
    rs.close();
    stmt.close();

    if (rowCount == 0) {
        JOptionPane.showMessageDialog(this, "Não foi encontrado registro correspondente ao aluno e à disciplina selecionados.");
        return;
    }

    String atualizarNotasSql = "UPDATE notas SET nota1 = ?, nota2 = ?, notatrabalho = ?, feedback = ? WHERE id = ? AND disciplina = ?";
    stmt = (PreparedStatement) conn.prepareStatement(atualizarNotasSql);
    stmt.setDouble(1, Double.parseDouble(nota1.getText())); 
    stmt.setDouble(2, Double.parseDouble(nota2.getText())); 
    stmt.setDouble(3, Double.parseDouble(notatrabalho.getText())); 
    stmt.setString(4, feedback.getText()); 
    stmt.setString(5, raAluno); 
    stmt.setString(6, disciplinaSelecionada); 
    int linhasAfetadas = stmt.executeUpdate();

    if (linhasAfetadas > 0) {
        JOptionPane.showMessageDialog(this, "Notas e feedback atualizados com sucesso.");
    } else {
        JOptionPane.showMessageDialog(this, "Não foi possível atualizar as notas e o feedback.");
    }
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this, "Por favor, insira um valor numérico válido para as notas.");
} catch (Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Erro ao atualizar notas e feedback: " + e.getMessage());
} finally {
    try {
        if (stmt != null) stmt.close();
        if (conn != null) conn.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
}

    }//GEN-LAST:event_registrarActionPerformed

    private void displistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displistActionPerformed
        String disciplinaSelecionada = displist.getSelectedItem().toString();
        dispreg.setText(disciplinaSelecionada);
    }//GEN-LAST:event_displistActionPerformed

    private void dispregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispregActionPerformed

    }//GEN-LAST:event_dispregActionPerformed

    private void listadealunosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listadealunosActionPerformed
     new listadealunos().setVisible(true);
                
    }//GEN-LAST:event_listadealunosActionPerformed

    private void estuturmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estuturmaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_estuturmaActionPerformed

    private void pesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarActionPerformed
   Connection conn = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
        conn = (Connection) Conexao.obterConexao();

        String estudanteId = estura.getText().trim();
        if (estudanteId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, insira o RA do estudante.");
            return;
        }

        // Consulta para obter dados do estudante
        String consultaEstudanteSql = "SELECT nome, curso, turma, disciplina1, disciplina2, disciplina3, disciplina4, disciplina5 FROM estucad WHERE id = ?";
        stmt = (PreparedStatement) conn.prepareStatement(consultaEstudanteSql);
        stmt.setString(1, estudanteId);
        rs = stmt.executeQuery();

        if (rs.next()) {
            estunome.setText(rs.getString("nome"));
            estucurso.setText(rs.getString("curso"));
            estuturma.setText(rs.getString("turma"));

            String turmaAluno = rs.getString("turma");
            String disciplina1Aluno = rs.getString("disciplina1");
            String disciplina2Aluno = rs.getString("disciplina2");
            String disciplina3Aluno = rs.getString("disciplina3");
            String disciplina4Aluno = rs.getString("disciplina4");
            String disciplina5Aluno = rs.getString("disciplina5");

            String idProfessor = SessaoUsuario.getInstancia().getIdProfessor();
            String consultaDisciplinasSql = "SELECT disciplinas, disciplinas2, disciplinas3, turma1, turma2, turma3 FROM profcad WHERE id = ?";
            stmt = (PreparedStatement) conn.prepareStatement(consultaDisciplinasSql);
            stmt.setString(1, idProfessor);
            rs = stmt.executeQuery();

            List<String> disciplinasIguais = new ArrayList<>();

            while (rs.next()) {
                String disciplina1Prof = rs.getString("disciplinas");
                String disciplina2Prof = rs.getString("disciplinas2");
                String disciplina3Prof = rs.getString("disciplinas3");
                String turma1Prof = rs.getString("turma1");
                String turma2Prof = rs.getString("turma2");
                String turma3Prof = rs.getString("turma3");

                // Verificar se a turma do aluno corresponde a uma das turmas do professor
                boolean turmaCorresponde = turmaAluno.equals(turma1Prof) || turmaAluno.equals(turma2Prof) || turmaAluno.equals(turma3Prof);

                if (turmaCorresponde) {
                    // Comparar todas as disciplinas do professor com as disciplinas do aluno
                    if (disciplina1Prof != null && (disciplina1Prof.equals(disciplina1Aluno) || disciplina1Prof.equals(disciplina2Aluno) || disciplina1Prof.equals(disciplina3Aluno) || disciplina1Prof.equals(disciplina4Aluno) || disciplina1Prof.equals(disciplina5Aluno))) {
                        disciplinasIguais.add(disciplina1Prof);
                    }
                    if (disciplina2Prof != null && (disciplina2Prof.equals(disciplina1Aluno) || disciplina2Prof.equals(disciplina2Aluno) || disciplina2Prof.equals(disciplina3Aluno) || disciplina2Prof.equals(disciplina4Aluno) || disciplina2Prof.equals(disciplina5Aluno))) {
                        disciplinasIguais.add(disciplina2Prof);
                    }
                    if (disciplina3Prof != null && (disciplina3Prof.equals(disciplina1Aluno) || disciplina3Prof.equals(disciplina2Aluno) || disciplina3Prof.equals(disciplina3Aluno) || disciplina3Prof.equals(disciplina4Aluno) || disciplina3Prof.equals(disciplina5Aluno))) {
                        disciplinasIguais.add(disciplina3Prof);
                    }
                }
            }

            // Atualizar a displist com as disciplinas correspondentes
            displist.setModel(new DefaultComboBoxModel<>(disciplinasIguais.toArray(new String[0])));

            // Consulta para obter as notas do estudante
            String consultaNotasSql = "SELECT nota1, nota2, notatrabalho FROM notas WHERE id = ?";
            stmt = (PreparedStatement) conn.prepareStatement(consultaNotasSql);
            stmt.setString(1, estudanteId);
            rs = stmt.executeQuery();

            if (rs.next()) {
                nota1.setText(String.valueOf(rs.getDouble("nota1")));
                nota2.setText(String.valueOf(rs.getDouble("nota2")));
                notatrabalho.setText(String.valueOf(rs.getDouble("notatrabalho")));
            } else {
                JOptionPane.showMessageDialog(this, "Notas do estudante não encontradas.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Estudante não encontrado.");
            return;
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao buscar informações do estudante: " + e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    
}
    }//GEN-LAST:event_pesquisarActionPerformed

    private void estucursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estucursoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_estucursoActionPerformed

    private void registrardataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrardataActionPerformed
   String raAluno = estura.getText().trim();

    if (raAluno.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, insira o RA do aluno.");
        return;
    }

    String disciplinaSelecionada = dispreg.getText().trim();
    String dataf = data.getText().trim();
    boolean presencaMarcada = pres.isSelected();
    boolean faltaMarcada = falt.isSelected();

    if (dataf.isEmpty() || (!presencaMarcada && !faltaMarcada)) {
        JOptionPane.showMessageDialog(this, "Data ou presença não marcados.");
        return;
    }

    Connection conn = null;
    PreparedStatement stmt = null;
    ResultSetImpl rs = null;

    try {
        conn = (Connection) Conexao.obterConexao();

        
        String verificarLinhaSql = "SELECT COUNT(*) FROM notas WHERE id = ? AND disciplina = ?";
        stmt = (PreparedStatement) conn.prepareStatement(verificarLinhaSql);
        stmt.setString(1, raAluno);
        stmt.setString(2, disciplinaSelecionada);
        rs = (ResultSetImpl) stmt.executeQuery();

        rs.next();
        int rowCount = rs.getInt(1);
        rs.close();
        stmt.close();

        if (rowCount == 0) {
            JOptionPane.showMessageDialog(this, "Não foi encontrado registro correspondente ao aluno e à disciplina selecionados.");
            return;
        }

        
        String buscarPresencaSql = "SELECT presenca FROM notas WHERE id = ? AND disciplina = ?";
        stmt = (PreparedStatement) conn.prepareStatement(buscarPresencaSql);
        stmt.setString(1, raAluno);
        stmt.setString(2, disciplinaSelecionada);
        rs = (ResultSetImpl) stmt.executeQuery();

        String presencaAtual = "";
        if (rs.next()) {
            presencaAtual = rs.getString("presenca");
        }
        rs.close();
        stmt.close();

        
        String novaPresenca = dataf + " - " + (presencaMarcada ? "Presente" : "Falta");
        String presencaAtualizada;
        if (presencaAtual.contains(dataf)) {
            presencaAtualizada = presencaAtual.replaceFirst(dataf + " - .*(\\n)?", novaPresenca + "\n");
        } else {
            presencaAtualizada = (presencaAtual.isEmpty() ? "" : presencaAtual + "\n") + novaPresenca;
        }

        // Atualizar a presença no banco de dados
        String atualizarPresencaSql = "UPDATE notas SET presenca = ? WHERE id = ? AND disciplina = ?";
        stmt = (PreparedStatement) conn.prepareStatement(atualizarPresencaSql);
        stmt.setString(1, presencaAtualizada);
        stmt.setString(2, raAluno);
        stmt.setString(3, disciplinaSelecionada);
        int linhasAfetadas = stmt.executeUpdate();

        if (linhasAfetadas > 0) {
            JOptionPane.showMessageDialog(this, "Presença atualizada com sucesso.");
        } else {
            JOptionPane.showMessageDialog(this, "Não foi possível atualizar a presença.");
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao atualizar presença: " + e.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_registrardataActionPerformed

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
      new menuprof().setVisible(true);
      dispose();
    }//GEN-LAST:event_jLabel9MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
            
      
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(relatoriosproff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(relatoriosproff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(relatoriosproff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(relatoriosproff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new relatoriosproff().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField data;
    private javax.swing.JComboBox<String> displist;
    private javax.swing.JTextField dispreg;
    private javax.swing.JTextField estucurso;
    private javax.swing.JTextField estunome;
    private javax.swing.JTextField estura;
    private javax.swing.JTextField estuturma;
    private javax.swing.JCheckBox falt;
    private javax.swing.JTextArea feedback;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listadealunos;
    private javax.swing.JTextField nota1;
    private javax.swing.JTextField nota2;
    private javax.swing.JTextField notatrabalho;
    private javax.swing.JButton pesquisar;
    private javax.swing.JCheckBox pres;
    private javax.swing.JButton registrar;
    private javax.swing.JButton registrardata;
    // End of variables declaration//GEN-END:variables
}
